package org.openpredict.exchange.tests.util;

import com.google.common.collect.Sets;
import org.openpredict.exchange.beans.CoreSymbolSpecification;
import org.openpredict.exchange.beans.SymbolType;

import java.util.Set;

public final class TestConstants {


    public static final int SYMBOL_MARGIN = 5991;
    public static final int SYMBOL_EXCHANGE = 9269;
    public static final int SYMBOL_EXCHANGE_FEE = 9340;

    public static final long UID_1 = 1440001;
    public static final long UID_2 = 1440002;

    public static final int SYMBOL_AUTOGENERATED_RANGE_START = 40000;

    public static final int CURRENCY_AUD = 36;
    public static final int CURRENCY_BRL = 986;
    public static final int CURRENCY_CAD = 124;
    public static final int CURRENCY_CHF = 756;
    public static final int CURRENCY_CNY = 156;
    public static final int CURRENCY_CZK = 203;
    public static final int CURRENCY_DKK = 208;
    public static final int CURRENCY_EUR = 978;
    public static final int CURRENCY_GBP = 826;
    public static final int CURRENCY_HKD = 344;
    public static final int CURRENCY_JPY = 392;
    public static final int CURRENCY_KRW = 410;
    public static final int CURRENCY_MXN = 484;
    public static final int CURRENCY_MYR = 458;
    public static final int CURRENCY_NOK = 578;
    public static final int CURRENCY_NZD = 554;
    public static final int CURRENCY_PLN = 985;
    public static final int CURRENCY_RUB = 643;
    public static final int CURRENCY_SEK = 752;
    public static final int CURRENCY_SGD = 702;
    public static final int CURRENCY_THB = 764;
    public static final int CURRENCY_TRY = 949;
    public static final int CURRENCY_UAH = 980;
    public static final int CURRENCY_USD = 840;
    public static final int CURRENCY_VND = 704;
    public static final int CURRENCY_XAG = 961;
    public static final int CURRENCY_XAU = 959;
    public static final int CURRENCY_ZAR = 710;

    public static final int CURRENCY_XBT = 3762; // satoshi, 1E-8
    public static final int CURRENCY_ETH = 3928; // szabo, 1E-6
    public static final int CURRENCY_LTC = 4141; // litoshi, 1E-8
    public static final int CURRENCY_XDG = 4142;
    public static final int CURRENCY_GRC = 4143;
    public static final int CURRENCY_XPM = 4144;
    public static final int CURRENCY_XRP = 4145;
    public static final int CURRENCY_DASH = 4146;
    public static final int CURRENCY_XMR = 4147;
    public static final int CURRENCY_XLM = 4148;
    public static final int CURRENCY_ETC = 4149;
    public static final int CURRENCY_ZEC = 4150;


    public static final Set<Integer> CURRENCIES_FUTURES = Sets.newHashSet(
            CURRENCY_USD,
            CURRENCY_EUR);

    public static final Set<Integer> CURRENCIES_EXCHANGE = Sets.newHashSet(
            CURRENCY_ETH,
            CURRENCY_XBT);


    public static final Set<Integer> ALL_CURRENCIES = Sets.newHashSet(
            CURRENCY_AUD,
            CURRENCY_BRL,
            CURRENCY_CAD,
            CURRENCY_CHF,
            CURRENCY_CNY,
            CURRENCY_CZK,
            CURRENCY_DKK,
            CURRENCY_EUR,
            CURRENCY_GBP,
            CURRENCY_HKD,
            CURRENCY_JPY,
            CURRENCY_KRW,
            CURRENCY_MXN,
            CURRENCY_MYR,
            CURRENCY_NOK,
            CURRENCY_NZD,
            CURRENCY_PLN,
            CURRENCY_RUB,
            CURRENCY_SEK,
            CURRENCY_SGD,
            CURRENCY_THB,
            CURRENCY_TRY,
            CURRENCY_UAH,
            CURRENCY_USD,
            CURRENCY_VND,
            CURRENCY_XAG,
            CURRENCY_XAU,
            CURRENCY_ZAR,

            CURRENCY_XBT,
            CURRENCY_ETH,
            CURRENCY_LTC,
            CURRENCY_XDG,
            CURRENCY_GRC,
            CURRENCY_XPM,
            CURRENCY_XRP,
            CURRENCY_DASH,
            CURRENCY_XMR,
            CURRENCY_XLM,
            CURRENCY_ETC,
            CURRENCY_ZEC);

    public static final CoreSymbolSpecification SYMBOLSPEC_EUR_USD = CoreSymbolSpecification.builder()
            .symbolId(SYMBOL_MARGIN)
            .type(SymbolType.FUTURES_CONTRACT)
            .baseCurrency(CURRENCY_EUR)
            .quoteCurrency(CURRENCY_USD)
            .baseScaleK(1)
            .quoteScaleK(1)
            .marginBuy(2200)
            .marginSell(3210)
            .takerFee(0)
            .makerFee(0)
            .build();

    public static final CoreSymbolSpecification SYMBOLSPECFEE_USD_JPY = CoreSymbolSpecification.builder()
            .symbolId(SYMBOL_MARGIN)
            .type(SymbolType.FUTURES_CONTRACT)
            .baseCurrency(CURRENCY_USD)
            .quoteCurrency(CURRENCY_JPY)
            .baseScaleK(1_000_00) // 1K USD "micro" lot
            .quoteScaleK(10) // 10 JPY step
            .marginBuy(5_000) // effective leverage ~21
            .marginSell(6_000) // effective leverage ~18
            .takerFee(3)
            .makerFee(2)
            .build();


    public static final CoreSymbolSpecification SYMBOLSPEC_ETH_XBT = CoreSymbolSpecification.builder()
            .symbolId(SYMBOL_EXCHANGE)
            .type(SymbolType.CURRENCY_EXCHANGE_PAIR)
            .baseCurrency(CURRENCY_ETH)    // base = szabo
            .quoteCurrency(CURRENCY_XBT)   // quote = satoshi
            .baseScaleK(100_000)            // 1 lot = 100K szabo (0.1 ETH)
            .quoteScaleK(10)                // 1 step = 10 satoshi
            .takerFee(0)
            .makerFee(0)
            .build();

    // symbol with fees
    public static final CoreSymbolSpecification SYMBOLSPECFEE_XBT_LTC = CoreSymbolSpecification.builder()
            .symbolId(SYMBOL_EXCHANGE_FEE)
            .type(SymbolType.CURRENCY_EXCHANGE_PAIR)
            .baseCurrency(CURRENCY_XBT)    // base = satoshi
            .quoteCurrency(CURRENCY_LTC)   // quote = litoshi
            .baseScaleK(1_000_000)          // 1 lot = 1M satoshi (0.01 BTC)
            .quoteScaleK(10_000)            // 1 step = 10K litoshi
            .takerFee(1900)                 // taker fee 1900 litoshi per 1 lot
            .makerFee(700)                  // maker fee 700 litoshi per 1 lot
            .build();

}
